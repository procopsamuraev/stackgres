####
# This Dockerfile is used in order to build a container that runs the StackGres ITs
#
# Build the image with:
#
# docker build -f stackgres-k8s/ci/build/Dockerfile-ci -t "registry.gitlab.com/ongresinc/stackgres/$(yq -r '.variables.SG_CI_IMAGE_NAME' .gitlab-ci.yml)-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)" stackgres-k8s/ci/build/
#
###

FROM registry.access.redhat.com/ubi8-minimal:8.7-1107
  # From https://github.com/docker-library/docker/blob/master/20.10/cli/Dockerfile
  RUN microdnf install -y \
      ca-certificates \
      openssh-clients \
      wget \
      tar
  # RUN [ -e /etc/nsswitch.conf ] && grep '^hosts: files dns' /etc/nsswitch.conf
  ENV DOCKER_VERSION 24.0.0
  RUN set -eux; \
    wget -O 'docker.tgz' "https://download.docker.com/linux/static/stable/$(uname -m)/docker-24.0.0.tgz"; \
    tar --extract \
      --file docker.tgz \
      --strip-components 1 \
      --directory /usr/local/bin/ \
      --no-same-owner \
      'docker/docker' \
    ; \
    rm docker.tgz; \
    docker --version

  ENV DOCKER_BUILDX_VERSION 0.10.4
  RUN set -eux; \
    wget -O 'docker-buildx' "https://github.com/docker/buildx/releases/download/v0.10.4/buildx-v0.10.4.linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)"; \
    plugin='/usr/local/libexec/docker/cli-plugins/docker-buildx'; \
    mkdir -p "$(dirname "$plugin")"; \
    mv -vT 'docker-buildx' "$plugin"; \
    chmod +x "$plugin"; \
    docker buildx version

  ENV DOCKER_COMPOSE_VERSION 2.17.3
  RUN set -eux; \
  	wget -O 'docker-compose' "https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-linux-$(uname -m)"; \
  	plugin='/usr/local/libexec/docker/cli-plugins/docker-compose'; \
  	mkdir -p "$(dirname "$plugin")"; \
  	mv -vT 'docker-compose' "$plugin"; \
  	chmod +x "$plugin"; \
  	ln -sv "$plugin" /usr/local/bin/; \
  	docker-compose --version; \
  	docker compose version

  # COPY modprobe.sh /usr/local/bin/modprobe
  RUN wget -O /usr/local/bin/modprobe https://github.com/docker-library/docker/raw/6964fd52030c2e6e9e0943eaac07d78c9841fbb3/24/cli/modprobe.sh
  RUN chmod +x /usr/local/bin/modprobe
  # COPY docker-entrypoint.sh /usr/local/bin/
  RUN wget -O /usr/local/bin/docker-entrypoint.sh https://github.com/docker-library/docker/raw/6964fd52030c2e6e9e0943eaac07d78c9841fbb3/24/cli/docker-entrypoint.sh
  RUN chmod +x /usr/local/bin/docker-entrypoint.sh

  # https://github.com/docker-library/docker/pull/166
  #   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates
  #   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH
  # (For this to work, at least the "client" subdirectory of this path needs to be shared between the client and server containers via a volume, "docker cp", or other means of data sharing.)
  ENV DOCKER_TLS_CERTDIR=/certs
  # also, ensure the directory pre-exists and has wide enough permissions for "dockerd-entrypoint.sh" to create subdirectories, even when run in "rootless" mode
  RUN mkdir /certs /certs/client && chmod 1777 /certs /certs/client
  # (doing both /certs and /certs/client so that if Docker does a "copy-up" into a volume defined on /certs/client, it will "do the right thing" by default in a way that still works for rootless users)

  ENTRYPOINT ["docker-entrypoint.sh"]
  CMD ["sh"]

  # From https://github.com/docker-library/docker/blob/master/20.10/dind/Dockerfile
  RUN microdnf install -y \
      iptables \
      openssl \
      xz \
  # pigz: https://github.com/moby/moby/pull/35697 (faster gzip implementation)
      pigz \
    ;

  RUN set -eux; \
    groupadd -r dockremap; \
    useradd -r -g dockremap dockremap; \
    echo 'dockremap:165536:65536' >> /etc/subuid; \
    echo 'dockremap:165536:65536' >> /etc/subgid

  RUN set -eux; \
    wget -O 'docker.tgz' "https://download.docker.com/linux/static/stable/$(uname -m)/docker-24.0.0.tgz"; \
    tar --extract \
      --file docker.tgz \
      --strip-components 1 \
      --directory /usr/local/bin/ \
      --no-same-owner \
  # we exclude the CLI binary because we already extracted that over in the "docker:20.10-cli" image that we're FROM and we don't want to duplicate those bytes again in this layer
      --exclude 'docker/docker' \
    ; \
    rm docker.tgz; \
    dockerd --version; \
    containerd --version; \
    ctr --version; \
    runc --version

  # https://github.com/docker/docker/tree/master/hack/dind
  ENV DIND_COMMIT 1f32e3c95d72a29b3eaacba156ed675dba976cb5

  RUN set -eux; \
    wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind"; \
    chmod +x /usr/local/bin/dind

  # COPY dockerd-entrypoint.sh /usr/local/bin/
  RUN wget -O /usr/local/bin/dockerd-entrypoint.sh https://github.com/docker-library/docker/raw/6964fd52030c2e6e9e0943eaac07d78c9841fbb3/24/dind/dockerd-entrypoint.sh
  RUN chmod +x /usr/local/bin/dockerd-entrypoint.sh

  VOLUME /var/lib/docker
  EXPOSE 2375 2376

  ENTRYPOINT ["dockerd-entrypoint.sh"]
  CMD []

  # StackGres CI Tools
  RUN microdnf install -y gnupg openssl jq curl bash zsh sed
  RUN uname -a | grep -qxF aarch64 \
    || wget -O /bin/yajsv https://github.com/neilpa/yajsv/releases/download/v1.4.1/yajsv.linux.amd64
  RUN chmod a+x /bin/yajsv
  RUN microdnf install -y python39-pip
  RUN pip3 install yamllint yq
  RUN mkdir -p "$HOME/.docker"; echo '{"experimental":"enabled"}' > "$HOME/.docker/config.json"
  RUN microdnf install -y git
  RUN microdnf install -y xz
  RUN mkdir -p ~/.docker/cli-plugins
  RUN echo '{"experimental":"enabled"}' > ~/.docker/config.json
  RUN wget -O /bin/kubectl "https://dl.k8s.io/release/v1.27.2/bin/linux/$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)/kubectl"
  RUN chmod a+x /bin/kubectl
  RUN wget -O /bin/kind-0.15.0 "https://github.com/kubernetes-sigs/kind/releases/download/v0.15.0/kind-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)"
  RUN chmod a+x /bin/kind-0.15.0
  RUN wget -O /bin/kind-0.19.0 "https://github.com/kubernetes-sigs/kind/releases/download/v0.19.0/kind-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)"
  RUN chmod a+x /bin/kind-0.19.0
  RUN ln -s /bin/kind-0.19.0 /bin/kind
  RUN wget -O /bin/k3d "https://github.com/rancher/k3d/releases/download/v5.5.1/k3d-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)"
  RUN chmod a+x /bin/k3d
  RUN wget "https://get.helm.sh/helm-v3.12.0-linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64).tar.gz" -O -|tar xz --strip-components=1 -C /bin -f - "linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)/helm"
  RUN wget "https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64).tar.gz" -O -|tar xz -C /bin -f - k9s
  RUN pip3 install awscli
  RUN wget https://github.com/operator-framework/operator-sdk/releases/download/v1.29.0/operator-sdk_linux_$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64) -O /bin/operator-sdk
  RUN chmod a+x /bin/operator-sdk
  RUN wget https://github.com/operator-framework/operator-registry/releases/download/v1.27.1/linux-$(uname -m | grep -qxF aarch64 && echo arm64 || echo amd64)-opm -O /bin/opm
  RUN chmod a+x /bin/opm
  RUN microdnf install -y findutils make procps diffutils
  RUN wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_$(uname -m | grep -qxF aarch64 && echo arm64 || echo x86_64).tar.gz -O -|tar xz -C /bin -f - helm-docs
  RUN wget https://github.com/gohugoio/hugo/releases/download/v0.81.0/hugo_0.81.0_Linux-$(uname -m | grep -qxF aarch64 && echo ARM64 || echo 64bit).tar.gz -O -|tar xz -C /bin -f - hugo
  RUN wget https://github.com/fybrik/crdoc/releases/download/v0.6.2/crdoc_0.6.2_Linux_$(uname -m | grep -qxF aarch64 && echo arm64 || echo x86_64).tar.gz -O -|tar xz -C /bin -f - crdoc
